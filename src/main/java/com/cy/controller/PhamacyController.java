package com.cy.controller;import com.cy.bean.*;import com.cy.biz.DrugStorageService;import com.cy.biz.PhamacyService;import com.cy.util.StringUtils;import com.github.pagehelper.PageInfo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;import javax.annotation.Resource;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.*;@Controller@RequestMapping("/phamacy")public class PhamacyController {    private Map<String,Object> map = new HashMap<>();    @Autowired    private PhamacyService phamacyService;    @Resource    private DrugStorageService drugStorageServiceImp;    @RequestMapping("/phamacyAllDrugs.action")    public String  phamacyAllDrugs(HttpServletRequest request, String num , String drugName,String drugNumber,String formulation){        if(!StringUtils.isEmpty(drugName)){            map.put("drugName",drugName);        }if(!StringUtils.isEmpty(drugNumber)){            map.put("drugNumber",Integer.parseInt(drugNumber));        }if(!StringUtils.isEmpty(formulation)){            map.put("formulation",formulation);        }        PageInfo  drugpage = phamacyService.selectPhamacyAllDrugsPageInfo(map, num,6);            if (drugpage!=null) {                map.clear();                request.setAttribute("drugpage",drugpage);            return "/pharmacyPage/phamacyAllDrugs";        } else {            return "error";        }    }    @RequestMapping("/phamacyDrugDetils.action")    public String phamacyDrugDetils(HttpServletRequest request ,String pharmacyId ){        if(!StringUtils.isEmpty(pharmacyId)){            int a = Integer.parseInt(pharmacyId);            PhamacyDrug phamacyDrug = phamacyService.selectByIdPhamacyDrug(a);            request.setAttribute("phamacyDrug",phamacyDrug);        }        return "/pharmacyPage/phamacyDrugDetils";    }    //查询药品分类信息显示请领页    @RequestMapping("/selectPharmacyClassification.action")    public String selectPharmacyClassification(HttpServletRequest request){        List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();        request.setAttribute("drugClassification",drugClassification);        return "/pharmacyPage/phamacyLeadDrug";    }    //药品发药    @RequestMapping("/phamacyDispensingClassification.action")    public String phamacyDispensingClassification(HttpServletRequest request){        List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();        request.setAttribute("drugClassification",drugClassification);        return "/pharmacyPage/phamacyDispensing";    }    //药品报损    @RequestMapping("/phamacyBadDrug.action")    public String phamacyBadDrug(HttpServletRequest request){        List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();        request.setAttribute("drugClassification",drugClassification);        return "/pharmacyPage/phamacyBadDrugs";    }    //查询药品分类信息显示调价页    @RequestMapping("/selectPharmacyPriceClassification.action")    public String selectPharmacyPriceClassification(HttpServletRequest request){        List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();        request.setAttribute("drugClassification",drugClassification);        return "/pharmacyPage/phamacyDrugPrice";    }    //请领药品通过药品分类查询药品    @RequestMapping(value="/selectPharmacyClassificationPhamacyDrugDetils.action",method=RequestMethod.POST, produces="application/json;charset=utf-8")    public @ResponseBody PageInfo<PhamacyDrug> selectPharmacyClassificationPhamacyDrugDetils(String drugClassificationId ,String num){        PageInfo<PhamacyDrug>  phamacyDrugs = new PageInfo<PhamacyDrug>();        if(!StringUtils.isEmpty(drugClassificationId)){            int a = Integer.parseInt(drugClassificationId);           phamacyDrugs = phamacyService.selectPhamacyClassificationdDrug(a,num, 5);        }        return phamacyDrugs;    }    //请领药品通查询药品详细信息    @RequestMapping(value="/selectPhamacyDrugDetils.action",method=RequestMethod.POST, produces="application/json;charset=utf-8")    public @ResponseBody PhamacyDrug selectPhamacyDrugDetils(String pharmacyId ){        PhamacyDrug phamacyDrugs = new PhamacyDrug();        if(!StringUtils.isEmpty(pharmacyId)){            int a = Integer.parseInt(pharmacyId);            phamacyDrugs = phamacyService.selectByIdPhamacyDrug(a);        }        return phamacyDrugs;    }    //请领药品    @RequestMapping("/addRecevieDrug.action")    public String addRecevieDrug(HttpServletRequest request ,String[] drugQuantity,String[] selected,String drugDetails){        List<PhamacyReceive> phamacyReceiveList = new ArrayList<PhamacyReceive>();        String [] drugs = new String[10];        int a=0;        if(drugQuantity!=null||selected!=null){            for(int j=0;j<drugQuantity.length;j++) {                if (drugQuantity[j] != "") {                    drugs[a] = drugQuantity[j];                    a++;                }            }            for(int i=0;i<selected.length;i++){                if(selected[i]!=""){                    PhamacyReceive phamacyReceive= new PhamacyReceive();                    phamacyReceive.setPharmacyId(Integer.parseInt(selected[i]));                    phamacyReceive.setPhamacyDrugQuantity(Integer.parseInt(drugs[i]));                    Date ss = new Date();                    SimpleDateFormat nowDate = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式                    String time = nowDate.format(ss.getTime());                    phamacyReceive.setReceiveDate(time);                    phamacyReceive.setState("审核中");                    phamacyReceive.setReceiverDrug(drugDetails);                    HttpSession session = request.getSession();                    Admin admin = (Admin)session.getAttribute("admin");                    phamacyReceive.setAdminId(admin.getAdminId());                    phamacyReceive.setUserId(1);                    phamacyReceive.setUrl("url");                    phamacyReceiveList.add(phamacyReceive);                }            }        }        int result= phamacyService.addPhamacyReceiveDrugs(phamacyReceiveList);        return "forward:/phamacy/selectPhamacyReceive.action";    }    //药房药品盘点    @RequestMapping("/addCheckDrug.action")    public String addCheckDrug(HttpServletRequest request ,String[] drugQuantity,String[] selected,String drugDetails){        List<PhamacyDrug> phamacyList = new ArrayList<PhamacyDrug>();        String [] drugs = new String[10];        int a=0;        if(drugQuantity!=null||selected!=null){                for(int j=0;j<drugQuantity.length;j++) {                    if (drugQuantity[j] != "") {                        drugs[a] = drugQuantity[j];                        a++;                    }            }            for (int i = 0; i < selected.length; i++) {                if (selected[i] != "") {                    PhamacyDrug phamacyDrug= new PhamacyDrug();                    phamacyDrug.setPharmacyId(Integer.parseInt(selected[i]));                    phamacyDrug.setDrugQuantity(Integer.parseInt(drugs[i]));                    phamacyList.add(phamacyDrug);                }            }        }        int result= phamacyService.checkPhamacyDrugsList(phamacyList);        phamacyList.clear();        return "forward:/phamacy/phamacyAllDrugs.action";    }    //药品审核单查询    @RequestMapping("/selectPhamacyReceive.action")    public String selectPhamacyReceive(HttpServletRequest request, String num , String state,String drugName,String receiveDate){        if(!StringUtils.isEmpty(state)){            map.put("state",state);        }if(!StringUtils.isEmpty(drugName)){            map.put("drugName",drugName);        }if(!StringUtils.isEmpty(receiveDate)){            map.put("receiveDate",receiveDate);        }        PageInfo<PhamacyReceive> phamacyReceive = phamacyService.selectPhamacyReceivePageInfo(map, num, 10);        if (phamacyReceive!=null) {            map.clear();            HttpSession session = request.getSession();            request.setAttribute("phamacyReceive",phamacyReceive);            return "/pharmacyPage/phamacyReceives";        } else {            return "error";        }    }    //药房申请类通过药品名查询药品    @RequestMapping(value="/selectPhamacyLedDrugs.action",method=RequestMethod.POST, produces="application/json;charset=UTF-8")    public @ResponseBody PageInfo<PhamacyDrug> selectPhamacyLedDrugs(HttpServletRequest request, String num , String drugName){        PageInfo<PhamacyDrug> phamacyReceive = phamacyService.selectPhamacyDrugsPage(drugName, num, 3);        return phamacyReceive;    }    //删除药房请求药品列表    @RequestMapping(value="/delectPhamacyReceive.action",method=RequestMethod.POST, produces="application/json;charset=utf-8")    public @ResponseBody HashMap<String ,Object> delectPhamacyReceive(String receiverId){        int result=0;        result = phamacyService.delectPhamacyReceives(Integer.parseInt(receiverId));        HashMap<String ,Object> map = new HashMap<String ,Object>();        if(result>0){            map.put("success",1);        }else{            map.put("success",0);        }        return map;    }    //修改药房请求药品状态    @RequestMapping(value="/updatePhamacyReceive.action",method=RequestMethod.POST, produces="application/json;charset=utf-8")    public @ResponseBody HashMap<String ,Object> updatePhamacyReceive(HttpServletRequest request,String receiverId,String state,String receiverDrug,String phamacyDrugQuantity,String pharmacyId){        int result=0;        PhamacyReceive phamacyReceive = new PhamacyReceive();        phamacyReceive.setReceiverId(Integer.parseInt(receiverId));        phamacyReceive.setState(state);        phamacyReceive.setReceiverDrug(receiverDrug);        phamacyReceive.setPhamacyDrugQuantity(Integer.parseInt(phamacyDrugQuantity));        phamacyReceive.setPharmacyId(Integer.parseInt(pharmacyId));        HttpSession session = request.getSession();        Admin admin = (Admin)session.getAttribute("admin");        phamacyReceive.setAuditor(admin.getAdminName());        result = phamacyService.updatePhamacyReceives(phamacyReceive);        HashMap<String ,Object> map = new HashMap<String ,Object>();        if(result>0){            //            String drugName = drugStorageServiceImp.drugName(Integer.parseInt(pharmacyId));            //通过审核将药品的数量增加            Purchase purchase=new Purchase(Integer.parseInt(phamacyDrugQuantity),drugName);            drugStorageServiceImp.addDrug(purchase);            map.put("success",1);        }else{            map.put("success",0);        }        return map;    }    //药品报损    @RequestMapping("/addPet.action")    public String addPet(HttpServletRequest request ,String[] drugQuantity, String[] selected, String drugDetails,                       MultipartFile pic    )            throws IllegalStateException, IOException {        String image=null;        if (!pic.isEmpty()) {            BASE64Encoder encoder = new BASE64Encoder();            //通过base64转码          image = encoder.encode(pic.getBytes());                    }        //插入报损数据        List<PhamacyReceive> phamacyReceiveList = new ArrayList<PhamacyReceive>();        String [] drugs = new String[10];        int a=0;        if(drugQuantity!=null||selected!=null){            for(int j=0;j<drugQuantity.length;j++) {                if (!StringUtils.isEmpty(drugQuantity[j])) {                    drugs[a] = drugQuantity[j];                    a++;                }            }            for(int i=0;i<selected.length;i++){                if(selected[i]!=""){                    PhamacyReceive phamacyReceive= new PhamacyReceive();                    phamacyReceive.setPharmacyId(Integer.parseInt(selected[i]));                    phamacyReceive.setPhamacyDrugQuantity(Integer.parseInt(drugs[i]));                    Date ss = new Date();                    SimpleDateFormat nowDate = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式                    String time = nowDate.format(ss.getTime());                    phamacyReceive.setReceiveDate(time);                    phamacyReceive.setState("审核中");                    phamacyReceive.setReceiverDrug(drugDetails);                    HttpSession session = request.getSession();                    Admin admin = (Admin)session.getAttribute("admin");                    phamacyReceive.setAdminId(admin.getAdminId());                    phamacyReceive.setUserId(1);                    phamacyReceive.setUrl(image);                    phamacyReceiveList.add(phamacyReceive);                }            }        }        int result= phamacyService.addPhamacyReceiveDrugs(phamacyReceiveList);        return "forward:/phamacy/selectPhamacyReceive.action";    }    @RequestMapping(value="/images.action",method=RequestMethod.GET)    public void images(HttpServletRequest request, HttpServletResponse response,String receiverId) throws IOException {       if(!StringUtils.isEmpty(receiverId)){           PhamacyReceive phamacyReceive = phamacyService.selectPhamacyImage(Integer.parseInt(receiverId));           byte[] byteAry = phamacyReceive.getUrl().getBytes();           String data = new String(byteAry,"UTF-8");           BASE64Decoder encoder = new BASE64Decoder();           byte[] bytes = encoder.decodeBuffer(data);           for(int i=0;i<bytes.length;i++){               if(bytes[i]<0){                   bytes[i]+=256;               }           }           response.setContentType("image/jpeg");           ServletOutputStream out = response.getOutputStream();           out.write(bytes);           out.flush();           out.close();       }    }    //报损id查询报损信息    @RequestMapping("/selectPhamacyDrugReceiveDetils.action")    public  String selectPhamacyDrugReceiveDetils(HttpServletRequest request,String receiverId ){        PhamacyReceive phamacyReceive = new PhamacyReceive();        if(!StringUtils.isEmpty(receiverId)){            int a = Integer.parseInt(receiverId);            phamacyReceive = phamacyService.selectPhamacyImage(a);            request.setAttribute("phamacyReceive",phamacyReceive);        }        return "/pharmacyPage/phamacyBadDrugDetils";    }    public Map<String, Object> getMap() {        return map;    }    public void setMap(Map<String, Object> map) {        this.map = map;    }    public PhamacyService getPhamacyService() {        return phamacyService;    }    public void setPhamacyService(PhamacyService phamacyService) {        this.phamacyService = phamacyService;    }}    