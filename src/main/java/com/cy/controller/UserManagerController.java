package com.cy.controller;import com.cy.bean.*;import com.cy.biz.PhamacyService;import com.cy.biz.UserService;import com.cy.util.StringUtils;import com.github.pagehelper.PageInfo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import sun.misc.BASE64Decoder;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.awt.image.BufferedImage;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Controller@RequestMapping("/userPage")public class UserManagerController {    private Map<String,Object> map = new HashMap<>();    HttpSession session;    @Autowired    private PhamacyService phamacyService;    @Autowired    private UserService userServiceImpl ;    @Autowired    private Shopping shopping;    Map<String,Object>addUserMap =new HashMap<String,Object>();    Map<String,Object>checkName =new HashMap<String,Object>();    //前台药品展示    @RequestMapping("/selectPhamacyDrugs.action")    public String selectPhamacyReceive(HttpServletRequest request, String num , String state,String drugName){        if(!StringUtils.isEmpty(state)){            map.put("state",state);        }if(!StringUtils.isEmpty(drugName)){            map.put("drugName",drugName);        }        PageInfo<PhamacyDrug> phamacyDrugPageInfo = phamacyService.selectPhamacyAllDrugsPageInfo(map, num, 10);        List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();                if (phamacyDrugPageInfo!=null && drugClassification!= null) {            map.clear();            HttpSession session = request.getSession();            request.setAttribute("phamacyReceive",phamacyDrugPageInfo);            request.setAttribute("drugClassification",drugClassification);            return "userPage/pharacyDrugs";        } else {            return "error";        }    }          //查询药品详情    @RequestMapping("/selectPhamacyDrugDetils.action")    public  String selectPhamacyDrugReceiveDetils(HttpServletRequest request, String receiverId ){                if(!StringUtils.isEmpty(receiverId)){            int a = Integer.parseInt(receiverId);            PhamacyDrug phamacyDrug  = phamacyService.selectByIdPhamacyDrug(a);            List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();            request.setAttribute("drugClassification",drugClassification);            request.setAttribute("phamacyDrug",phamacyDrug);            request.setAttribute("userId",1);                    }        return "userPage/pharacyDrugsDetils";    }    @RequestMapping(value="/images.action",method=RequestMethod.GET)    public void images(HttpServletRequest request, HttpServletResponse response, String receiverId) throws IOException {        if (!StringUtils.isEmpty(receiverId)) {            PhamacyDrug phamacyDrug = phamacyService.selectByIdPhamacyDrug(Integer.parseInt(receiverId));            byte[] byteAry = phamacyDrug.getDrugPhoto().getBytes();            String data = new String(byteAry, "UTF-8");            BASE64Decoder encoder = new BASE64Decoder();            byte[] bytes = encoder.decodeBuffer(data);            for (int i = 0; i < bytes.length; i++) {                if (bytes[i] < 0) {                    bytes[i] += 256;                }            }            response.setContentType("image/jpeg");            ServletOutputStream out = response.getOutputStream();            out.write(bytes);            out.flush();            out.close();        }    }    //请领药品通过药品分类查询药品    @RequestMapping("/selectPharmacyClassificationPhamacyDrugDetils.action")    public  String selectPharmacyClassificationPhamacyDrugDetils(HttpServletRequest request,String drugClassificationId , String num){        PageInfo<PhamacyDrug>  phamacyDrugs = new PageInfo<PhamacyDrug>();        if(!StringUtils.isEmpty(drugClassificationId)){            int a = Integer.parseInt(drugClassificationId);            phamacyDrugs = phamacyService.selectPhamacyClassificationdDrug(a,num, 10);            List<DrugClassification> drugClassification = phamacyService.selectDrugClassification();            request.setAttribute("phamacyReceive",phamacyDrugs);            request.setAttribute("drugClassification",drugClassification);        }        return "/pharacyDrugs.jsp";    }    //验证码生成    @RequestMapping("/userImage")    public void Image(HttpServletRequest request, HttpServletResponse response) {        session =request.getSession();        try {            Map<String, BufferedImage> images = com.cy.util.ImageUtil.createImage();            String keyCode = images.keySet().iterator().next();            BufferedImage image = images.get(keyCode);            session.setAttribute("code",keyCode);            ServletOutputStream out = response.getOutputStream();            ImageIO.write(image, "jpg", out);        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    //登录    @RequestMapping("/userLogin")    public String Login(Model model, User user , HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException, ServletException {        session = request.getSession();        String sessionCode = (String) session.getAttribute("code");        String code = request.getParameter("code");        if (code.equalsIgnoreCase(sessionCode)) {            User userResult = userServiceImpl.userLogin(user);            if(userResult!=null){                model.addAttribute("user", userResult);                HttpSession session = request.getSession();                session.setAttribute("userListSession", userResult);                                return "forward:/userPage/selectPhamacyDrugs.action";            }else{                response.sendRedirect("userLogin.jsp");            }        }else{            request.setAttribute("codeResult", "验证码错误");            request.getRequestDispatcher("/userLogin.jsp").forward(request,response);        }        return null;    }    //账号查重    @RequestMapping("/checkUserName")    @ResponseBody    public Map checkAdminName(String userName,HttpServletResponse   response){        Map<String,Object>checkName =new HashMap<String,Object>();        User userResult = userServiceImpl.checkName(userName);        if(userResult!=null){            checkName.put("success",true);            checkName.put("message","请输入密码");            return checkName;        }else{            checkName.put("failure",false);            checkName.put("message","用户不存在");            return checkName;        }    }    //重置密码    @RequestMapping("/newPassword.action")    public String newPassword(HttpServletRequest request,User user){        int result=   userServiceImpl.setPassword(user);        return "redirect:/userLogin.jsp";    }    //    增加用户    @RequestMapping("/userAdd")    @ResponseBody    public Map  userAdd(Model model,User user,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {        if(user.getPassword()==null){            addUserMap.put("success",false);            addUserMap.put("message","密码不能为空");            return addUserMap;        }else if(userServiceImpl.checkName(user.getUserName())!=null){            addUserMap.put("success",false);            addUserMap.put("message","用户已存在");            return addUserMap;        }        int result=userServiceImpl.userRegister(user);        if(result>0){            User userResult = userServiceImpl.userLogin(user);            if(userResult!=null){                model.addAttribute("user", userResult);                request.getRequestDispatcher("/WEB-INF/userPage/pharacyDrugs.jsp").forward(request,response);                return null;            }        }else {            addUserMap.put("success",false);            addUserMap.put("message","添加失败");            return addUserMap;        }        return null;    }    //添加商品到购物车    @RequestMapping("/addShoppingCar.action")    @ResponseBody    public  Map<String, Object> addShoppingCar(HttpServletRequest request, String userId ,String pharmacyId) {        int a = Integer.parseInt(userId);        int b = Integer.parseInt(pharmacyId);        Map<String, Object> addShoppingCar = new HashMap<String, Object>();        Boolean flag = userServiceImpl.addShoppingCar(a, b);        if (flag) {            addShoppingCar.put("addUserCar", true);        }else {            return addShoppingCar;        }        return addShoppingCar;    }    //查询购物车详情    @RequestMapping("/selectShoppingCar.action")    public  String selectShoppingCar(HttpServletRequest request,String userId){        int a = Integer.parseInt(userId);        List<PhamacyDrug> shoppingCarList  = userServiceImpl.selectShoppingCar(a);        List<Shopping>  shoppingCarNum = userServiceImpl.selectShopingNum(a);        request.setAttribute("shoppingCarList",shoppingCarList);        request.setAttribute("carNumList",shoppingCarNum);        request.setAttribute("userId",a);        return "userPage/frontShoppingCar";    }    //删除购物车商品    @RequestMapping("/deleteShoppingCar.action")    @ResponseBody    public  Map<String, Object> deleteShoppingCar(HttpServletRequest request, String shoppingId) {        int a = Integer.parseInt(shoppingId);        Map<String, Object> addShoppingCar = new HashMap<String, Object>();        Boolean flag = userServiceImpl.deleteShoppingCar(a);        if (flag) {            addShoppingCar.put("delUserCar", true);        }else {            return addShoppingCar;        }        return addShoppingCar;    }    //查询价格，插入到页面    @RequestMapping("/upadetPriceShoppingCar.action")    @ResponseBody    public  Map<String, Object> upadetPriceShoppingCar(HttpServletRequest request, String pharmacyId) {        int pharmacyId1 = Integer.parseInt(pharmacyId);        Map<String, Object> addShoppingCar = new HashMap<String, Object>();        List<PhamacyDrug> priceShopingCarList = userServiceImpl.priceShoppingCar(pharmacyId1);        if (priceShopingCarList!=null) {            request.setAttribute("upadetPriceList",priceShopingCarList);            addShoppingCar.put("priceShopingCarList", priceShopingCarList);        }else {            return addShoppingCar;        }        return addShoppingCar;    }    //查询所有价格，插入到页面    @RequestMapping("/allPriceShoppingCar.action")    @ResponseBody    public  Map<String, Object> allPriceShoppingCar(HttpServletRequest request) {        Map<String, Object> addShoppingCar = new HashMap<String, Object>();        List<PhamacyDrug> priceShopingCarList = userServiceImpl.AllpriceShoppingCar();        if (priceShopingCarList!=null) {            request.setAttribute("upadetPriceList",priceShopingCarList);            addShoppingCar.put("allPriceShoppingCar", priceShopingCarList);        }else {            return addShoppingCar;        }        return addShoppingCar;    }    //购物车结算    @RequestMapping("/addFrontShopping.action")    public String addFrontShopping(HttpServletRequest request ,String selected,String userId,String userAdderss){        List<PhamacyReceive> phamacyReceiveList = new ArrayList<PhamacyReceive>();        List<Shopping> shoppingList = new ArrayList<Shopping>();        String[] pharmacyId = selected.split(",");        int a=0;        for(int i=0;i<pharmacyId.length;i++){            if(pharmacyId[i]!="" && i%2==0){                PhamacyReceive phamacyReceive= new PhamacyReceive();                phamacyReceive.setPharmacyId(Integer.parseInt(pharmacyId[i]));                phamacyReceive.setReceiverDrug("销售");                phamacyReceive.setState("审核中");                phamacyReceive.setUserId(Integer.parseInt(userId));                phamacyReceive.setUserAddress(userAdderss);                phamacyReceiveList.add(phamacyReceive);            }            if(pharmacyId[i]!=""&i%2!=0){                Shopping shoppinglist = new Shopping();                shoppinglist.setShoppingId(Integer.parseInt(pharmacyId[i]));                shoppingList.add(shoppinglist);            }        }        userServiceImpl.addShoppingList(phamacyReceiveList);        userServiceImpl.deldetShoppingList(shoppingList);        return "userPage/frontShoppingCarHui";    }}